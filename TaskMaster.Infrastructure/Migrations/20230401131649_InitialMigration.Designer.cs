// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskMaster.Infrastructure.Contexts;

#nullable disable

namespace TaskMaster.Infrastructure.Migrations
{
    [DbContext(typeof(TaskMasterDbContext))]
    [Migration("20230401131649_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskMaster.Infrastructure.Entities.AssignedTaskList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Guid>("TaskListId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_list_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_assigned_task_lists");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_assigned_task_lists_author_id");

                    b.HasIndex("TaskListId")
                        .HasDatabaseName("ix_assigned_task_lists_task_list_id");

                    b.HasIndex("UserId", "TaskListId")
                        .IsUnique()
                        .HasDatabaseName("ix_assigned_task_lists_user_id_task_list_id");

                    b.ToTable("assigned_task_lists", (string)null);
                });

            modelBuilder.Entity("TaskMaster.Infrastructure.Entities.TaskList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_task_lists");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_task_lists_author_id");

                    b.HasIndex("CreatedAtUtc")
                        .HasDatabaseName("ix_task_lists_created_at_utc");

                    b.ToTable("task_lists", (string)null);
                });

            modelBuilder.Entity("TaskMaster.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TaskMaster.Infrastructure.Entities.AssignedTaskList", b =>
                {
                    b.HasOne("TaskMaster.Infrastructure.Entities.User", "Author")
                        .WithMany("OwnedTaskLists")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assigned_task_lists_users_author_id");

                    b.HasOne("TaskMaster.Infrastructure.Entities.TaskList", "TaskList")
                        .WithMany("Assignees")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assigned_task_lists_task_lists_task_list_id");

                    b.HasOne("TaskMaster.Infrastructure.Entities.User", "User")
                        .WithMany("AssignedTaskLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assigned_task_lists_users_user_id");

                    b.Navigation("Author");

                    b.Navigation("TaskList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskMaster.Infrastructure.Entities.TaskList", b =>
                {
                    b.HasOne("TaskMaster.Infrastructure.Entities.User", "Author")
                        .WithMany("CreatedTaskLists")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_lists_users_author_id");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TaskMaster.Infrastructure.Entities.TaskList", b =>
                {
                    b.Navigation("Assignees");
                });

            modelBuilder.Entity("TaskMaster.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("AssignedTaskLists");

                    b.Navigation("CreatedTaskLists");

                    b.Navigation("OwnedTaskLists");
                });
#pragma warning restore 612, 618
        }
    }
}
